Assume that we have a hypothetical queuing system that has 3 queues: Queue-A, Queue-B, Queue-C, in which travelers are
waiting to be cleared for their flights. Each queue has an inspector and we call him/her Checker. Queue-A has an
inspector named Checker-A. Similarly, Queue-B and Queue-C has inspectors named Checker-B and Checker-C respectively.
Each checker is responsible for processing his/her queue. A checker will be busy for a certain amount of time somewhere
between 1 min to 15 mins in order to process a person’s credentials. You can use a random generator to simulate the checker’s time.

Effectively, a person has to go though two queues, either through Queues A, C or Queues B, C.

From time to time the checkers themselves peek in their respective queues to find the length of their queues. If they
find that their queue length is increasing steadily then they will expedite their processing.
TODO - You need to come up with a policy (or a set of policies) that these TSA checkers will use to manage their queues effectively.

Initially you start the simulation with a population of say N (e.g., 50) people who want to be checked in so that they
can board their flights. Make sure that N people are assigned to different queues at different times somewhere between
1 min to 10 minutes. For example, say a person P1 arrives at Queue-A at time t[1]=0. The next person, say P2, arrives
at Queue-B at t[2]=2.1 seconds (i.e., 2.1 secs later). The third person, say P3, arrives at Queue-B at t[3]=3.8 minutes
later after P2. People arrive at different times but never together.

How you distribute 50 people across different queues is up to you. For example, Queue-A can have max capacity of 30,
and Queue-B has 20. It is up to you how you set up the initial distribution of people. Afterwards, you can alter the
input capacities to say 11 persons going to Queue A and 39 people going to the Queue B. Different initial distributions
become your different test cases. The program ends when all 50 people have been processed. Compute the total time when
all persons have been processed through both the queues. You should use all the methods that you find in Java
collection’s queue interface. You can also use System.currentMilliSecs() to the get current time from system to
simulate time, and other collection objects in your program in necessary. The goal of program is to simulate this
queuing system as best as you can.